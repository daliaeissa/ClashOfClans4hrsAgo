I added a line to clear the scene after the timer finishes some time and the it calls a function to recreate the items in the scene and re add them to the scene again. It works but then crashes once enemies start moving towards the walls. Where is the issue. Find it and fix it.
This is the main.cpp:
#include "start.h"
#include "Player.h"
#include "Clan.h"
#include "fence.h"
#include "enemy.h"
#include "worker.h"
#include "Bullet.h"
#include <QApplication>
#include <QGraphicsScene>
#include <QGraphicsView>
#include <QGraphicsItem>
#include <QGraphicsRectItem>
#include <QGraphicsPixmapItem>
#include<QPixmap>
#include <QPen>
#include <QTimer>
#include <QFont>
#include <QPointF>
#include<vector>
#include"Levels.h"

// Define a structure to represent a node
struct Node {
    QPointF position; // Position of the node
    bool isClanNode; // Flag to indicate if this is the clan node

    // Constructor to initialize the position and the flag
    Node(const QPointF& pos, bool isClan = false) : position(pos), isClanNode(isClan) {}
};

void next_level(QGraphicsScene &scene, QGraphicsView &view){
    // Create Clan
    Clan *clan = new Clan(&scene);
    Clan::end_of_time = false;
    //clan->setRect(250, 300, 50, 50);
    //  // Fences
    //  Fence *LeftFence = new Fence(400, 350);
    //  LeftFence->setRect(150, 50, 50, 400);
    // // LeftFence->Display();
    //  Fence *RightFence = new Fence(400, 350);
    //  RightFence->setRect(400, 50, 50, 400);
    // // RightFence->Display();
    //  Fence *TopFence = new Fence(400, 350);
    //  TopFence->setRect(200, 50, 200, 50);
    // // TopFence->Display();
    //  Fence *BottomFence = new Fence(400, 350);
    //  BottomFence->setRect(200, 400, 200, 50);
    // // BottomFence->Display();

    // Fences
    //Fence *LeftFence = new Fence(400, 350, &scene, 50, 400);
    Fence *LeftFence = new Fence(140, -47, &scene, 70, 556);
    //LeftFence->setRect(150, 50, 50, 400);
    // LeftFence->Display();
    //Fence *RightFence = new Fence(400, 350, &scene, 50, 400);
    Fence *RightFence = new Fence(390, -47, &scene, 70, 556);
    //RightFence->setRect(400, 50, 50, 400);
    // RightFence->Display();
    // Fence *TopFence = new Fence(400, 350, &scene, 200, 50);
    Fence *TopFence = new Fence(150, 38, &scene, 300, 70);
    //TopFence->setRect(200, 50, 200, 50);
    // TopFence->Display();
    Fence *BottomFence = new Fence(150, 388, &scene, 300, 70);
    //BottomFence->setRect(200, 400, 200, 50);
    // BottomFence->Display();

    // Array of fences
    Fence* arr[4] = {LeftFence, RightFence, TopFence, BottomFence};/*{ fence1, fence2, fence3, fence4, fence5, fence6, fence7, fence8, fence9, fence10, fence11, fence12,
                      fence13, fence14, fence15, fence16, fence17,fence18, fence19, fence20, fence21, fence22, fence23, fence24};*/


    // Create Player (Cannon)

    //player->setRect(250, 200, 50, 50);
    // scene.setSceneRect(0,0,600,500);
    // Player *player = new Player(&scene, arr);
    // player->setTransformOriginPoint(QPointF(25, 25));
    // player->setFlag(QGraphicsItem::ItemIsFocusable);
    // player->setFocus();
    // factor 50
    // Putting Player
    // scene.addItem(player);
    // Putting Bullet
    //scene.addItem(Bullet);
    // Putting clan
    scene.addItem(clan);
    // Putting fences
    /*  scene.addItem(fence1);
    scene.addItem(fence2);
    scene.addItem(fence3);
    scene.addItem(fence4);
    scene.addItem(fence5);
    scene.addItem(fence6);
    scene.addItem(fence7);
    scene.addItem(fence8);
    scene.addItem(fence9);
    scene.addItem(fence10);
    scene.addItem(fence11);
    scene.addItem(fence12);
    scene.addItem(fence13);
    scene.addItem(fence14);
    scene.addItem(fence15);
    scene.addItem(fence16);
    scene.addItem(fence17);
    scene.addItem(fence18);
    scene.addItem(fence19);
    scene.addItem(fence20);
    scene.addItem(fence21);
    scene.addItem(fence22);
    scene.addItem(fence23);
    scene.addItem(fence24);*/
    scene.addItem(LeftFence);
    scene.addItem(RightFence);
    scene.addItem(TopFence);
    scene.addItem(BottomFence);

    /*QTimer * time1 = new QTimer();
    QObject::connect(time1, SIGNAL(timeout()),fence2,SLOT(Display()));
    time1->start(1000);*/
    //fence2->decHealth();
    Player *player = new Player(&scene, arr);
    player->setTransformOriginPoint(QPointF(25, 25));
    player->setFlag(QGraphicsItem::ItemIsFocusable);
    player->setFocus();
    //scene.addItem(health_display);
    // Putting workers
    worker* worker1 = new worker();
    //worker1->setRect(200,225,50,50);
    worker1->setRect(240,300,25,25);//right of clan
    scene.addItem(worker1);
    worker* worker2 = new worker();
    //worker2->setRect(350,225,50,50);
    worker2->setRect(260,300,25,25);//left of clan
    scene.addItem(worker2);
    worker* worker3 = new worker();
    //worker3->setRect(275,100,50,50);
    worker3->setRect(250,290,25,25);//top of clan
    scene.addItem(worker3);
    worker* worker4 = new worker();
    //worker4->setRect(275,350,50,50);
    worker4->setRect(250,310,25,25);//bottom of clan
    scene.addItem(worker4);

    QTimer * time_enemy = new QTimer();
    QObject::connect(time_enemy, SIGNAL(timeout()),player,SLOT(createEnemy()));
    time_enemy->start(2000);

    QTimer *time_worker1 = new QTimer();
    QObject::connect(time_worker1, SIGNAL(timeout()),worker1,SLOT(moveWorker1()));
    time_worker1->start(30);
    QTimer *time_worker2 = new QTimer();
    QObject::connect(time_worker2, SIGNAL(timeout()),worker2,SLOT(moveWorker2()));
    time_worker2->start(30);
    QTimer *time_worker3 = new QTimer();
    QObject::connect(time_worker3, SIGNAL(timeout()),worker3,SLOT(moveWorker3()));
    time_worker3->start(50);
    QTimer *time_worker4 = new QTimer();
    QObject::connect(time_worker4, SIGNAL(timeout()),worker4,SLOT(moveWorker4()));
    time_worker4->start(30);

    // Create a QTimer object
    QTimer timer;

    // Set the interval to 5 minutes (300,000 milliseconds)
    timer.setInterval(0.05 * 60 * 1000); // 5 minutes * 60 seconds * 1000 milliseconds

    // Connect the timeout signal of the timer to a lambda function
    QObject::connect(&timer, &QTimer::timeout, [&]() {
        qDebug() << "Time's up!";
        Clan::end_of_time = true;
        scene.clear();

    });

    // Start the timer
    timer.start();

    view.show();
}


int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    // Define the size of the playable area and the size of each node
    int areaWidth = 200;
    int areaHeight = 300;
    int nodeWidth = 20;
    int nodeHeight = 20;

    // Calculate the number of nodes along each dimension
    int numNodesX = areaWidth / nodeWidth;
    int numNodesY = areaHeight / nodeHeight;

    // Create a vector to store all the nodes
    std::vector<Node> nodes;

    // Populate the nodes with their positions
    for (int y = 0; y < numNodesY; ++y) {
        for (int x = 0; x < numNodesX; ++x) {
            // Calculate the position of the node
            QPointF position(x * nodeWidth, y * nodeHeight);

            // Determine if this node is the clan node
            bool isClanNode = (position.x() == 70 && position.y() == 220);

            // Create a new node with the calculated position and add it to the vector
            nodes.emplace_back(position, isClanNode);
        }
    }

    // Output the positions of all nodes and indicate the clan node (for demonstration purposes)
    for (const auto& node : nodes) {
        qDebug() << "Node position:" << node.position << "Is clan node:" << node.isClanNode;
    }

    // Create scene
    QGraphicsScene scene;

    // Create Clan
    Clan *clan = new Clan(&scene);
    //clan->setRect(250, 300, 50, 50);
   //  // Fences
   //  Fence *LeftFence = new Fence(400, 350);
   //  LeftFence->setRect(150, 50, 50, 400);
   // // LeftFence->Display();
   //  Fence *RightFence = new Fence(400, 350);
   //  RightFence->setRect(400, 50, 50, 400);
   // // RightFence->Display();
   //  Fence *TopFence = new Fence(400, 350);
   //  TopFence->setRect(200, 50, 200, 50);
   // // TopFence->Display();
   //  Fence *BottomFence = new Fence(400, 350);
   //  BottomFence->setRect(200, 400, 200, 50);
   // // BottomFence->Display();

    // Fences
    //Fence *LeftFence = new Fence(400, 350, &scene, 50, 400);
    Fence *LeftFence = new Fence(140, -47, &scene, 70, 556);
    //LeftFence->setRect(150, 50, 50, 400);
    // LeftFence->Display();
    //Fence *RightFence = new Fence(400, 350, &scene, 50, 400);
    Fence *RightFence = new Fence(390, -47, &scene, 70, 556);
    //RightFence->setRect(400, 50, 50, 400);
    // RightFence->Display();
    // Fence *TopFence = new Fence(400, 350, &scene, 200, 50);
    Fence *TopFence = new Fence(150, 38, &scene, 300, 70);
    //TopFence->setRect(200, 50, 200, 50);
    // TopFence->Display();
    Fence *BottomFence = new Fence(150, 388, &scene, 300, 70);
    //BottomFence->setRect(200, 400, 200, 50);
    // BottomFence->Display();

    // Array of fences
    Fence* arr[4] = {LeftFence, RightFence, TopFence, BottomFence};/*{ fence1, fence2, fence3, fence4, fence5, fence6, fence7, fence8, fence9, fence10, fence11, fence12,
                      fence13, fence14, fence15, fence16, fence17,fence18, fence19, fence20, fence21, fence22, fence23, fence24};*/


    // Create Player (Cannon)

    //player->setRect(250, 200, 50, 50);
    scene.setSceneRect(0,0,600,500);
    Player *player = new Player(&scene, arr);
    player->setTransformOriginPoint(QPointF(25, 25));
    player->setFlag(QGraphicsItem::ItemIsFocusable);
    player->setFocus();
    // factor 50
    // Putting Player
    scene.addItem(player);
    // Putting Bullet
    //scene.addItem(Bullet);
    // Putting clan
    scene.addItem(clan);
    // Putting fences
  /*  scene.addItem(fence1);
    scene.addItem(fence2);
    scene.addItem(fence3);
    scene.addItem(fence4);
    scene.addItem(fence5);
    scene.addItem(fence6);
    scene.addItem(fence7);
    scene.addItem(fence8);
    scene.addItem(fence9);
    scene.addItem(fence10);
    scene.addItem(fence11);
    scene.addItem(fence12);
    scene.addItem(fence13);
    scene.addItem(fence14);
    scene.addItem(fence15);
    scene.addItem(fence16);
    scene.addItem(fence17);
    scene.addItem(fence18);
    scene.addItem(fence19);
    scene.addItem(fence20);
    scene.addItem(fence21);
    scene.addItem(fence22);
    scene.addItem(fence23);
    scene.addItem(fence24);*/
    scene.addItem(LeftFence);
    scene.addItem(RightFence);
    scene.addItem(TopFence);
    scene.addItem(BottomFence);

    /*QTimer * time1 = new QTimer();
    QObject::connect(time1, SIGNAL(timeout()),fence2,SLOT(Display()));
    time1->start(1000);*/
    //fence2->decHealth();

 //scene.addItem(health_display);
    // Putting workers
    worker* worker1 = new worker();
    //worker1->setRect(200,225,50,50);
    worker1->setRect(240,300,25,25);//right of clan
    scene.addItem(worker1);
    worker* worker2 = new worker();
    //worker2->setRect(350,225,50,50);
    worker2->setRect(260,300,25,25);//left of clan
    scene.addItem(worker2);
    worker* worker3 = new worker();
    //worker3->setRect(275,100,50,50);
    worker3->setRect(250,290,25,25);//top of clan
    scene.addItem(worker3);
    worker* worker4 = new worker();
    //worker4->setRect(275,350,50,50);
    worker4->setRect(250,310,25,25);//bottom of clan
    scene.addItem(worker4);

    //Create view

    QGraphicsView view;
    view.setFixedSize(600,500);
    view.setScene(&scene);
    view.setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    view.setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);

    QTimer * time_enemy = new QTimer();
    QObject::connect(time_enemy, SIGNAL(timeout()),player,SLOT(createEnemy()));
    time_enemy->start(2000);
    if(Clan::end_of_time){
        time_enemy->stop();
    }

    QTimer *time_worker1 = new QTimer();
    QObject::connect(time_worker1, SIGNAL(timeout()),worker1,SLOT(moveWorker1()));
    time_worker1->start(30);
    QTimer *time_worker2 = new QTimer();
    QObject::connect(time_worker2, SIGNAL(timeout()),worker2,SLOT(moveWorker2()));
    time_worker2->start(30);
    QTimer *time_worker3 = new QTimer();
    QObject::connect(time_worker3, SIGNAL(timeout()),worker3,SLOT(moveWorker3()));
    time_worker3->start(50);
    QTimer *time_worker4 = new QTimer();
    QObject::connect(time_worker4, SIGNAL(timeout()),worker4,SLOT(moveWorker4()));
    time_worker4->start(30);

    // Create a QTimer object
    QTimer timer;

    // Set the interval to 5 minutes (300,000 milliseconds)
    timer.setInterval(0.2 * 60 * 1000); // 5 minutes * 60 seconds * 1000 milliseconds

    // Connect the timeout signal of the timer to a lambda function
    QObject::connect(&timer, &QTimer::timeout, [&]() {
        qDebug() << "Time's up!";
        Clan::end_of_time = true;
        scene.clear();
        Levels::level_counter += 1;
        next_level(scene,view);
    });

    // Start the timer
    timer.start();

    view.show();
    // Start w;
    // w.show();
    return a.exec();
}
This is the enemy.cpp:







#include "enemy.h"
#include "Fence.h"
#include "Bullet.h"
#include "worker.h"
#include"player.h"
#include<QGraphicsScene>
#include<QGraphicsView>
#include<QThread>
#include<QDebug>
#include<QPixmap>
#include<QGraphicsPixmapItem>
#include <QGraphicsTextItem>
#include"clan.h"
#include"gameovermenu.h"
#include"ui_gameovermenu.h"
#include"congratulationsmenu.h"
#include"ui_congratulationsmenu.h"

/*void Enemy::hit_fence(){
    Fence::decHealth();
}*/

/*void Enemy::decHealth(int i) {
    health_arr[i]--;
}*/

int Enemy::health_1 = 200;
int Enemy::health_2 = 200;
int Enemy::health_3 = 200;
int Enemy::health_4 = 200;

void Enemy::hit(int i){
    //arr[i]->setHealth(100)
    if (health_arr[i] > 150){
        health_arr[i]-=5;
    }
    else if(health_arr[i] <= 150){
        health_arr[i]--;
    }
}

void Enemy::hit_clan(){
    Clan::clan_health -= 1;
}


void Enemy::goToClanRight(){
    if(x()<=225 && y()<=300){
        setPos(x()+5,y()+4);
    }
    if(x()<=225 && 200<y() && y()<320){
        setPos(x()+11,y()+5);
    }
    if(x()<=220 && y()>300){
        setPos(x()+4,y()-4);
    }
    /QGraphicsTextItem health = new QGraphicsTextItem();*/ // Create new health display
    QList<QGraphicsItem*> colliding_itemsClan = collidingItems();
    for(int i = 0; i < colliding_itemsClan.size(); i++){
        if(typeid(*(colliding_itemsClan[i])) == typeid(Clan))
        {

            clanCollision = true;
            Clan::counter++;
            setPos(x(),y());
             if(Clan::clan_health != 0)
             {
    //             health->setPos(225, 325);
    //             scene()->addItem(health); // Add health to the correct scene
    //             }
    //         if (scene() && health->scene() != scene()) { // Check if health is in the correct scene
    //                 scene()->addItem(health); // Add health to the correct scene
    //             }
    //         health->setPlainText(QString("Health: ") + QString::number(Clan::clan_health));
                 hit_clan();
            }
    //     if(Clan::clan_health <= 0){ // Check if health exists and health is non-positive
    //             if (scene()) { // Check if scene exists

    //             scene()->removeItem(health);
    //             scene()->removeItem(this);
    //             } else {
    //                 qDebug() << "Enemy scene is null";
    //             }
    //             delete health;
    //             //arr[0] = nullptr; // Set arr[0] to null pointer after deletion
            }
            if(Clan::clan_health == 0 && !Clan::end_of_time && scene()){
                scene()->removeItem(colliding_itemsClan[i]);
                scene()->clear();
                GameOverMenu* gameover_menu = new GameOverMenu();
                gameover_menu->show();
            }
            else if (!(Clan::clan_health == 0) && Clan::end_of_time && scene()){
                scene()->clear();
                CongratulationsMenu* congrats_menu = new CongratulationsMenu();
                congrats_menu->show();
            }
            qDebug() << "Clan health:" << Clan::clan_health;
        }
  }

void Enemy::goToClanLeft(){
    if(x()>=250 && y()<=300){
        setPos(x()-5.5,y()+3);
    }
    if(x()>250 && 200<y() && y()<320){
        setPos(x()-5,y()+1);
    }
    if(x()>=250 && y()>300){
        setPos(x()-5,y()-6);
    }
    QList<QGraphicsItem*> colliding_itemsClan = collidingItems();
    for(int i = 0; i < colliding_itemsClan.size(); i++){
        if(typeid(*(colliding_itemsClan[i])) == typeid(Clan))
        {

            clanCollision = true;
            Clan::counter++;
            setPos(x(),y());
            if(Clan::clan_health != 0)
            {
                //             health->setPos(225, 325);
                //             scene()->addItem(health); // Add health to the correct scene
                //             }
                //         if (scene() && health->scene() != scene()) { // Check if health is in the correct scene
                //                 scene()->addItem(health); // Add health to the correct scene
                //             }
                //         health->setPlainText(QString("Health: ") + QString::number(Clan::clan_health));
                hit_clan();
            }
            //     if(Clan::clan_health <= 0){ // Check if health exists and health is non-positive
            //             if (scene()) { // Check if scene exists

            //             scene()->removeItem(health);
            //             scene()->removeItem(this);
            //             } else {
            //                 qDebug() << "Enemy scene is null";
            //             }
            //             delete health;
            //             //arr[0] = nullptr; // Set arr[0] to null pointer after deletion
        }
        if(Clan::clan_health == 0 && !Clan::end_of_time && scene()){
            scene()->removeItem(colliding_itemsClan[i]);
            scene()->clear();
            GameOverMenu* gameover_menu = new GameOverMenu();
            gameover_menu->show();
        }
        else if (!(Clan::clan_health == 0) && Clan::end_of_time && scene()){
            scene()->clear();
            CongratulationsMenu* congrats_menu = new CongratulationsMenu();
            congrats_menu->show();
        }
        qDebug() << "Clan health:" << Clan::clan_health;
    }
}
void Enemy::goToClanUp(){
    if(x()<=250 && y()>=350){
        setPos(x(),y()-5);
    }
    // if(x()>250 && y()>=300){
    //     setPos(x()-1,y()-1);
    // }
    // if(x()>225 && x()<275 && y()>300){
    //     setPos(x(),y()-5);
    // }
    QList<QGraphicsItem*> colliding_itemsClan = collidingItems();
    for(int i = 0; i < colliding_itemsClan.size(); i++){
        if(typeid(*(colliding_itemsClan[i])) == typeid(Clan))
        {
            clanCollision = true;
            Clan::counter++;
            setPos(x(),y());
            if(Clan::clan_health != 0)
            {
                //             health->setPos(225, 325);
                //             scene()->addItem(health); // Add health to the correct scene
                //             }
                //         if (scene() && health->scene() != scene()) { // Check if health is in the correct scene
                //                 scene()->addItem(health); // Add health to the correct scene
                //             }
                //         health->setPlainText(QString("Health: ") + QString::number(Clan::clan_health));
                hit_clan();
            }
            //     if(Clan::clan_health <= 0){ // Check if health exists and health is non-positive
            //             if (scene()) { // Check if scene exists

            //             scene()->removeItem(health);
            //             scene()->removeItem(this);
            //             } else {
            //                 qDebug() << "Enemy scene is null";
            //             }
            //             delete health;
            //             //arr[0] = nullptr; // Set arr[0] to null pointer after deletion
        }
        if(Clan::clan_health == 0 && !Clan::end_of_time && scene()){
            scene()->removeItem(colliding_itemsClan[i]);
            scene()->clear();
            GameOverMenu* gameover_menu = new GameOverMenu();
            gameover_menu->show();
        }
        else if (!(Clan::clan_health == 0) && Clan::end_of_time && scene()){
            scene()->clear();
            CongratulationsMenu* congrats_menu = new CongratulationsMenu();
            congrats_menu->show();
        }
        qDebug() << "Clan health:" << Clan::clan_health;
    }
}
void Enemy::goToClanDown(){
    if(x()<=225 && y()<=300){
        setPos(x()+1,y()+1);
    }
    if(x()>275 && y()<300){
        setPos(x()-1,y()+1);
    }
    if(x()>225 && x()<275 && y()<300){
        setPos(x(),y()+5);
    }
    QList<QGraphicsItem*> colliding_itemsClan = collidingItems();
    for(int i = 0; i < colliding_itemsClan.size(); i++){
        if(typeid(*(colliding_itemsClan[i])) == typeid(Clan))
        {
            clanCollision = true;
            setPos(x(),y());
        }
    }
}

bool is_hit = false;
QGraphicsTextItem* health = nullptr; // Declare health outside the loop


// Inside Enemy::move_right() function
void Enemy::move_right() {
    // if(x() != 225){
        setPos(x() + 5, y());
    // }

    QList<QGraphicsItem*> colliding_items2 = collidingItems();

    // if(/health_arr[0] <= 0/Player::Right){
    //     if(x()<250-x() && y()<300-y()){
    //         setPos(x()+1, y()+10);
    //     }
    // }

    for(int i = 0; i < colliding_items2.size(); i++) {
        // if(typeid(*(colliding_items2[i])) == typeid(Bullet)) {
        //     if(enemy_health > 0){
        //         enemy_health--;
        //     }
        //     if(enemy_health == 0){
        //         scene()->removeItem(this);
        //         delete this;
        //         break;
        //     }
        // }

        if(typeid(*(colliding_items2[i])) == typeid(Fence)) {
            setPos(125, y());
            is_hit = true;
            if(health_arr[0] && health_arr[0] > 0) { // Check if arr[0] exists and health is positive
                hit(0);
                if (!health) { // Check if health is null
                    health = new QGraphicsTextItem; // Create new health display
                    health->setPos(50, 250);
                    scene()->addItem(health); // Add health to the correct scene
                }
                if (scene() && health->scene() != scene()) { // Check if health is in the correct scene
                    scene()->addItem(health); // Add health to the correct scene
                }
                health->setPlainText(QString("Health: ") + QString::number(health_arr[0]));
            }
            if(health_arr[0] <= 0){ // Check if arr[0] exists and health is non-positive
                if (scene()) { // Check if scene exists

                    scene()->removeItem(arr[0]);
                    scene()->removeItem(this);
                } else {
                    qDebug() << "Enemy scene is null";
                }
                delete arr[0];
                arr[0] = nullptr; // Set arr[0] to null pointer after deletion
                Player::Right = true;

                setPos(x(),y());
            }
            return;
        }
        if (scene()) { // Check if scene exists

            //scene()->removeItem(arr[0]);
            scene()->removeItem(this);
        }
        // Collision with bullet

    }
    if (health && scene()) { // Check if health item exists and scene exists
        scene()->removeItem(health); // Remove previous health display if no collision
        health = nullptr; // Reset health pointer
        delete health; // Delete previous health display

    }
    QList<QGraphicsItem*> colliding_itemsworker1 = collidingItems();
    for(int i = 0; i < colliding_itemsworker1.size(); i++){
    if(typeid(*(colliding_itemsworker1[i])) == typeid(worker))
        {
    //     if(enemy_health > 0){
    //         enemy_health--;
    //     }
    //     if(enemy_health == 0){
         scene()->removeItem(colliding_itemsworker1[i]);
        delete colliding_itemsworker1[i];
      }
    }
    // }

}



QGraphicsTextItem* health2 = nullptr; // Declare health outside the loop

void Enemy::move_left(){
    setPos(x()-5, y());
    QList<QGraphicsItem*> colliding_items2 = collidingItems();

    for(int i = 0; i < colliding_items2.size(); i++) {
        // if(typeid(*(colliding_items2[i])) == typeid(Bullet)) {
        //     if(enemy_health > 0){
        //         enemy_health--;
        //     }
        //     if(enemy_health == 0){
        //         scene()->removeItem(this);
        //         delete this;
        //     }
        // }
        if(typeid(*(colliding_items2[i])) == typeid(Fence)) {
            setPos(450, y());
            is_hit = true;
            if(health_arr[1] && health_arr[1] > 0) { // Check if arr[1] exists and health is positive
                hit(1);
                if (!health2) { // Check if health2 is null
                    health2 = new QGraphicsTextItem; // Create new health display
                    health2->setPos(400, 250);
                    scene()->addItem(health2); // Add health2 to the correct scene
                }
                if (scene() && health2->scene() != scene()) { // Check if health2 is in the correct scene
                    scene()->addItem(health2); // Add health2 to the correct scene
                }
                health2->setPlainText(QString("Health: ") + QString::number(health_arr[1]));
            }
            if(health_arr[1] <= 0){ // Check if arr[0] exists and health is non-positive
                if (scene()) { // Check if scene exists

                    scene()->removeItem(arr[1]);
                    scene()->removeItem(this);
                } else {
                    qDebug() << "Enemy scene is null";
                }
                delete arr[1];
                arr[1] = nullptr; // Set arr[0] to null pointer after deletion
                Player::Left = true;

                setPos(x(),y());
            }
            return;
        }
        if (scene()) { // Check if scene exists

            //scene()->removeItem(arr[0]);
            scene()->removeItem(this);
        }
    }
    if (health2 && scene()) { // Check if health item exists and scene exists
        scene()->removeItem(health2); // Remove previous health display if no collision
        health2 = nullptr; // Reset health pointer
        delete health2; // Delete previous health display

    }
    QList<QGraphicsItem*> colliding_itemsworker2 = collidingItems();
    for(int i = 0; i < colliding_itemsworker2.size(); i++){
        if(typeid(*(colliding_itemsworker2[i])) == typeid(worker))
        {
            //     if(enemy_health > 0){
            //         enemy_health--;
            //     }
            //     if(enemy_health == 0){
            scene()->removeItem(colliding_itemsworker2[i]);
            delete colliding_itemsworker2[i];
        }
    }
    // }
}

QGraphicsTextItem* health3 = nullptr;

void Enemy::move_up(){
    setPos(x(), y()-5);
    QList<QGraphicsItem*> colliding_items2 = collidingItems();

    for(int i = 0; i < colliding_items2.size(); i++) {
        // if(typeid(*(colliding_items2[i])) == typeid(Bullet)) {
        //     if(enemy_health > 0){
        //         enemy_health--;
        //     }
        //     if(enemy_health == 0){
        //         scene()->removeItem(this);
        //         delete this;
        //     }
        // }
        if(typeid(*(colliding_items2[i])) == typeid(Fence)) {
            setPos(x(), 450);
            is_hit = true;
            if(health_arr[3] && health_arr[3] > 0) { // Check if arr[1] exists and health is positive
                hit(3);
                if (!health3) { // Check if health2 is null
                    health3 = new QGraphicsTextItem; // Create new health display
                    health3->setPos(250, 450);
                    scene()->addItem(health3); // Add health2 to the correct scene
                }
                if (health3->scene() != scene()) { // Check if health2 is in the correct scene
                    scene()->addItem(health3); // Add health2 to the correct scene
                }
                health3->setPlainText(QString("Health: ") + QString::number(health_arr[3]));
            }
            if(health_arr[3] <= 0){ // Check if arr[0] exists and health is non-positive
                if (scene()) { // Check if scene exists

                    scene()->removeItem(arr[3]);
                    scene()->removeItem(this);
                } else {
                    qDebug() << "Enemy scene is null";
                }
                delete arr[3];
                arr[3] = nullptr; // Set arr[0] to null pointer after deletion
                Player::Up = true;

                setPos(x(),y());
            }
            return;
        }
    }
    if (health3 && scene()) { // Check if health item exists and scene exists
        scene()->removeItem(health3); // Remove previous health display if no collision
        health3 = nullptr; // Reset health pointer
        delete health3; // Delete previous health display

    }
    QList<QGraphicsItem*> colliding_itemsworker3 = collidingItems();
    for(int i = 0; i < colliding_itemsworker3.size(); i++){
        if(typeid(*(colliding_itemsworker3[i])) == typeid(worker))
        {
            //     if(enemy_health > 0){
            //         enemy_health--;
            //     }
            //     if(enemy_health == 0){
            scene()->removeItem(colliding_itemsworker3[i]);
            delete colliding_itemsworker3[i];
        }
    }
    // }
}
QGraphicsTextItem* health4 = nullptr;

void Enemy::move_down(){
    setPos(x(), y()+5);
    QList<QGraphicsItem*> colliding_items2 = collidingItems();

    for(int i = 0; i < colliding_items2.size(); i++) {
        // if(typeid(*(colliding_items2[i])) == typeid(Bullet)) {
        //     if(enemy_health > 0){
        //         enemy_health--;
        //     }
        //     if(enemy_health == 0){
        //         scene()->removeItem(this);
        //         delete this;
        //     }
        // }
        if(typeid(*(colliding_items2[i])) == typeid(Fence)) {
            setPos(x(), 25);
            is_hit = true;
            if(health_arr[2] && health_arr[2] > 0) { // Check if arr[1] exists and health is positive
                hit(2);
                if (!health4) { // Check if health2 is null
                    health4 = new QGraphicsTextItem; // Create new health display
                    health4->setPos(250, 50);
                    scene()->addItem(health4); // Add health2 to the correct scene
                }
                if (health4->scene() != scene()) { // Check if health2 is in the correct scene
                    scene()->addItem(health4); // Add health2 to the correct scene
                }
                health4->setPlainText(QString("Health: ") + QString::number(health_arr[2]));
            }
            if(health_arr[2] <= 0){ // Check if arr[0] exists and health is non-positive
                if (scene()) { // Check if scene exists

                    scene()->removeItem(arr[0]);
                    scene()->removeItem(this);
                } else {
                    qDebug() << "Enemy scene is null";
                }
                delete arr[2];
                arr[2] = nullptr; // Set arr[0] to null pointer after deletion
                Player::Down = true;

                setPos(x(),y());
            }
            return;
        }
    }
    if (health4 && scene()) { // Check if health item exists and scene exists
        scene()->removeItem(health4); // Remove previous health display if no collision
        delete health4; // Delete previous health display
        health4 = nullptr; // Reset health pointer
    }
    QList<QGraphicsItem*> colliding_itemsworker4 = collidingItems();
    for(int i = 0; i < colliding_itemsworker4.size(); i++){
        if(typeid(*(colliding_itemsworker4[i])) == typeid(worker))
        {
            //     if(enemy_health > 0){
            //         enemy_health--;
            //     }
            //     if(enemy_health == 0){
            scene()->removeItem(colliding_itemsworker4[i]);
            delete colliding_itemsworker4[i];
        }
    }
    // }
}

//Fence* arr[24];

/void setFenceObject(Fence& obj){

        arr[0] = obj;

}*/


Enemy::Enemy(Fence** arr):arr(arr) {


    // QPixmap enemy("C:/Users/omars/OneDrive/Desktop/Uni/AUC/Semester 6/CS II/Lab/Assignments/Assignment 3/Chicken.png");
    // setPixmap(enemy.scaled(25,25));

    setRect(0, 0, 25, 25);

    int left_x = 0;
    int right_x = 550;
    int LR_y = (rand() % 3 + 1) * 100+20;

    int down_y = 500;
    // int down_x = (rand() % 2 + 2) * 100;
    int down_x = 250;

    // Decides left or right or down
    // int direction_arr1[2] = {left_x, right_x};
    int decider = rand() % 3;
    if(decider == 0){
        setPos(left_x, LR_y);
    }
    if(decider == 1){
        setPos(right_x, LR_y);
    }
    if(decider == 2){
        setPos(down_x, down_y);
    }

    // Decides the y for left or right and the x for down



    // int x1, random_number_y1, x2, random_number_x3, y3, y4;
    // // Left and Right columns
    // x1 = 0;
    // x2 = 550;

    // //random_number_y1.display();
    // // Up and Down
    // random_number_x3 = rand() % (251) + 150;
    // random_number_y1 = rand() % 501;

    // y3 = 0;
    // y4 = 450;

    // //Left and right
    // int arr_1[4] = {x1, random_number_y1, x2, random_number_y1};

    // //Up and Down
    // int arr_2[4] = {y3, random_number_x3, y4, random_number_x3};

    // // Randomizes the choice either arr[0] or arr[2]
    // int final_random = rand()%2;
    // final_random *= 2;
    // // Decides which array to access
    // int arr_decider = rand() % 2;
    // arr_decider = arr_decider * 2 + 4;
    // if(arr_decider == 4){
    //     setPos(arr_1[final_random], arr_1[final_random+1]);
    // }
    // else{
    //     setPos(arr_2[final_random+1], arr_2[final_random]);
    // }

    // // Decide which way to move
    if(x() == 0 && !Player::Right){
        if(!Clan::end_of_time){
        // move right
        QTimer * timer = new QTimer();
        connect(timer, SIGNAL(timeout()),this,SLOT (move_right()));
        timer->start(50);
        if(Player::Right){
            timer->stop();
        }
        }
    }
    if(x() == 550 && !Player::Left){
        if(!Clan::end_of_time){
        // move left
        QTimer * timer = new QTimer();
        connect(timer, SIGNAL(timeout()),this,SLOT (move_left()));
        timer->start(50);
        if(Player::Left){
            timer->stop();
        }
        }
    }
    // if(arr_decider == 6 && final_random == 0 && !Player::Down){
    //     // move down
    //     QTimer * timer = new QTimer();
    //     connect(timer, SIGNAL(timeout()),this,SLOT (move_down()));
    //     timer->start(50);
    //     if(Player::Down){
    //         timer->stop();
    //     }
    // }
    if(y() == 500 && !Player::Up){
        if(!Clan::end_of_time){
        // move up
        QTimer * timer = new QTimer();
        connect(timer, SIGNAL(timeout()),this,SLOT (move_up()));
        timer->start(50);
        if(Player::Up){
            timer->stop();
        }
        }
    }

    if(Player::Right){
        if(!Clan::end_of_time){
        QTimer * timer = new QTimer();
        timer = new QTimer(this);
        connect(timer, SIGNAL(timeout()), this, SLOT(goToClanRight()));
        timer->start(50);
        if(clanCollision){
            timer->stop();
        }
        }
    }
    if(Player::Left){
        if(!Clan::end_of_time){
        QTimer * timer = new QTimer();
        timer = new QTimer(this);
        connect(timer, SIGNAL(timeout()), this, SLOT(goToClanLeft()));
        timer->start(50);
        if(clanCollision){
            timer->stop();
        }
        }
    }
    if(Player::Up){
        if(!Clan::end_of_time){
        QTimer * timer = new QTimer();
        timer = new QTimer(this);
        connect(timer, SIGNAL(timeout()), this, SLOT(goToClanUp()));
        timer->start(50);
        if(clanCollision){
            timer->stop();
        }
        }
    }
    if(Player::Down){
      if(!Clan::end_of_time){
        QTimer * timer = new QTimer();
        timer = new QTimer(this);
        connect(timer, SIGNAL(timeout()), this, SLOT(goToClanLDown()));
        timer->start(50);
        qDebug() << "Clan collision down: " << clanCollision;
        if(clanCollision){
            timer->stop();
        }
     }
    }

   /* while (is_hit = true && arr[0]->getHealth() > 0){
        arr[0]->decHealth();
    }*/




    //Handling collision with fence

   /* setPos(x(),y()-10);
    if(pos().y()+100<0){
        //scene()->removeItem(this);
        delete this;
    }*/

}(This is where it goes when it crashes)
This is the clan.cpp:
#include "clan.h"
#include <QGraphicsScene>
#include <QTimer>

int Clan::clan_health = 200;
int Clan::counter = 0;
bool Clan::end_of_time = false;


Clan::Clan(QGraphicsScene* scene) {
    QPixmap clanPixmap("C:/Users/omars/OneDrive/Desktop/Uni/AUC/Semester 6/CS II/Project/ClashOfClans1/Images/Clan.jpeg");
    setPixmap(clanPixmap.scaled(50, 50));
    setPos(250, 300);
    scene->addItem(this);
}
int Clan::getHealth(){
    return clan_health;
}
void Clan::setHealth(int clan_health){
    clan_health;
}
